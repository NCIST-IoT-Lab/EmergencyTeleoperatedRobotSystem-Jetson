"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class BotArm(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Mode:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[BotArm._Mode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Angle: BotArm._Mode.ValueType  # 0
        COORDINATE: BotArm._Mode.ValueType  # 1

    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper): ...
    Angle: BotArm.Mode.ValueType  # 0
    COORDINATE: BotArm.Mode.ValueType  # 1

    class _Side:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _SideEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[BotArm._Side.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Left: BotArm._Side.ValueType  # 0
        Right: BotArm._Side.ValueType  # 1

    class Side(_Side, metaclass=_SideEnumTypeWrapper): ...
    Left: BotArm.Side.ValueType  # 0
    Right: BotArm.Side.ValueType  # 1

    SIDE_FIELD_NUMBER: builtins.int
    MODE_FIELD_NUMBER: builtins.int
    ANGLES_FIELD_NUMBER: builtins.int
    side: global___BotArm.Side.ValueType
    mode: global___BotArm.Mode.ValueType
    @property
    def angles(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        side: global___BotArm.Side.ValueType = ...,
        mode: global___BotArm.Mode.ValueType = ...,
        angles: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["angles", b"angles", "mode", b"mode", "side", b"side"]) -> None: ...

global___BotArm = BotArm
